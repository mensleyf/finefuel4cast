lm_preds<-mod_fit$fitted.values
lm_resids<-mod_fit$residuals
# check
lm_resids[1:10]-(lm_data$agb[1:10]-mod_fit$fitted.values[1:10])
lm_preds_m<-matrix(as.vector(lm_preds),byrow=FALSE,nrow=(length(lm_preds))/34,ncol=34)
lm_preds_m<-as.data.frame(lm_preds_m)
names(lm_preds_m)<-paste0("lm_preds", seq(1987,2020))
# ----------------------- proc uncertainty  -------------------------
i=1;j=1
resids_m<-matrix(NA,nrow=nLocs,ncol=34)
for ( r in 1:length(lm_data$z_agb)){
resids_m[i,j]<-mod_fit$residuals[r]
i<-i+1
if (i>nLocs){
j=j+1
i=1
}
}
# overall rse
sqrt(sum(mod_fit$residuals^2)/(length(mod_fit$residuals)-(length(mod_fit$coefficients))))
sqrt(sum(mod_fit$residuals^2)/length(mod_fit$residuals))
sd(mod_fit$residuals)
# proc err related to mean prod?
agb_m<-matrix(NA,nrow=nLocs,ncol=34)
Ypred_m<-matrix(NA,nrow=nLocs,ncol=34)
resid_m<-matrix(NA,nrow=nLocs,ncol=34)
i<-1;j<-1
for ( r in 1:length(lm_data$z_agb)){
agb_m[i,j]<-lm_data$z_agb[r]
Ypred_m[i,j]<-mod_fit$fitted.values[r]
resid_m[i,j]<-mod_fit$fitted.values[r]-lm_data$z_agb[r]
i<-i+1
if (i>nLocs){
j=j+1
i=1
}
}
hist(mod_fit$residuals)
# actual way I'm adding proc err back in
proc_err<-sqrt(sum(mod_fit$residuals^2)/length(mod_fit$residuals))
sqrt(sum(mod_fit$residuals^2)/(length(mod_fit$residuals)-length(mod_fit$coefficients)))
sd(mod_fit$residuals)
summary(mod_fit)$sigma
#adding it in on the iterations dataframe
Y_pred_iters<-Ypred_m + rnorm(nrow(Ypred_m)*ncol(Ypred_m), 0,proc_err)
par(mfrow=c(1,1))
plot(Y_pred_iters[1:100,], Ypred_m[1:100,])
Y_lo<-Ypred_m-proc_err
Y_hi<-Ypred_m+proc_err
#look
par(mfrow=c(1,1))
site_no<-sample(1:nLocs,1)
site_rows<-seq(site_no,34*nLocs,nLocs)
ymax<-max(Y_hi[site_rows])
ymin<-min(Y_lo[site_rows])
plot(seq(1987,2020,1),y=lm_data$z_agb[site_rows],pch=19, ylim=c(ymin,ymax))
lines(seq(1987,2020,1),y=lm_data$z_agb[site_rows],pch=19)
points(seq(1987,2020,1),y=Ypred_m[site_rows], col="red", lty=2,pch=19)
lines(seq(1987,2020,1),y=Ypred_m[site_rows], col="red",pch=19)
lines(seq(1987,2020,1),y=Y_hi[site_rows], col="red",lty=2,pch=19)
lines(seq(1987,2020,1),y=Y_lo[site_rows], col="red",lty=2,pch=19)
prod_preds<-list(Ypred_m, Y_hi, Y_lo, agb_m,resid_m,  coord_df, mod_fit)
names(prod_preds)<-c("prod_mean", "prod_90", "prod_10", "agb_m","resids", "coord_df", "mod_fit")
print(summary(mod_fit))
saveRDS(prod_preds, paste0(prod_folder,"/prod_model_outputs/", save_name,".rds"))
}
coord_df<-as.data.frame(cbind(model_df$long, model_df$lat))[1:nLocs,]
names(coord_df)<-c("long", "lat")
## various models and save locs
mod_data_list<-list(mod1_data,mod2_data,mod3_data,mod4_data,mod5_data)
save_loc1<-"/figures/march_vis/forecast/"
save_loc2<-"/figures/march_vis/spatial_only_model/"
save_loc3<-"/figures/march_vis/climate/"
save_loc4<-"/figures/march_vis/climate_and_ndvi/"
save_loc5<-"/figures/march_vis/noaa3month/"
save_loc_list<-list(save_loc1,save_loc2,save_loc3,save_loc4,save_loc5)
save_name1<-"march_forecast_lm"
save_name2<-"march_spatial_only_lm"
save_name3<-"march_climate_lm"
save_name4<-"march_climate_and_ndvi_lm"
save_name5<-"march_noaa3month_lm"
save_name_list<-list(save_name1,save_name2,save_name3,save_name4,save_name5)
for ( i in 1:5){
mod_data<-mod_data_list[[i]]
save_loc<-save_loc_list[[i]]
save_name<-save_name_list[[i]]
X<-as.matrix(subset(mod_data, select=-c(z_agb,yr)))
Y<-mod_data[,1]
lm_data<-as.data.frame(cbind(Y,X))
names(lm_data)<-c("z_agb", names(mod_data)[!names(mod_data) %in% c("yr","z_agb")])
mod_fit<-lm(z_agb~.,data=lm_data)
#lm
sd(mod_fit$residuals)
#coeffs
names_coefs<-c("int",  names(lm_data))
names_coefs<-names_coefs[!(names_coefs=="z_agb" | names_coefs=="yr" )]
lm_coeffs<-as.data.frame(cbind(names_coefs,as.vector(coef(mod_fit)) ))
# View(lm_coeffs)
# write.csv(lm_coeffs,paste0(prod_folder, save_loc,"/",save_name,"_coeffs.csv"), row.names = FALSE)
# write.csv(lm_coeffs,paste0(prod_folder, "/model_csvs/",save_name,"_coeffs.csv"), row.names = FALSE)
# making same format of hindcast predictions
(nLocs<-nrow(mod_data)/34)
lm_preds<-mod_fit$fitted.values
lm_resids<-mod_fit$residuals
# check
lm_resids[1:10]-(lm_data$agb[1:10]-mod_fit$fitted.values[1:10])
lm_preds_m<-matrix(as.vector(lm_preds),byrow=FALSE,nrow=(length(lm_preds))/34,ncol=34)
lm_preds_m<-as.data.frame(lm_preds_m)
names(lm_preds_m)<-paste0("lm_preds", seq(1987,2020))
# ----------------------- proc uncertainty  -------------------------
i=1;j=1
resids_m<-matrix(NA,nrow=nLocs,ncol=34)
for ( r in 1:length(lm_data$z_agb)){
resids_m[i,j]<-mod_fit$residuals[r]
i<-i+1
if (i>nLocs){
j=j+1
i=1
}
}
# overall rse
sqrt(sum(mod_fit$residuals^2)/(length(mod_fit$residuals)-(length(mod_fit$coefficients))))
sqrt(sum(mod_fit$residuals^2)/length(mod_fit$residuals))
sd(mod_fit$residuals)
# proc err related to mean prod?
agb_m<-matrix(NA,nrow=nLocs,ncol=34)
Ypred_m<-matrix(NA,nrow=nLocs,ncol=34)
resid_m<-matrix(NA,nrow=nLocs,ncol=34)
i<-1;j<-1
for ( r in 1:length(lm_data$z_agb)){
agb_m[i,j]<-lm_data$z_agb[r]
Ypred_m[i,j]<-mod_fit$fitted.values[r]
resid_m[i,j]<-mod_fit$fitted.values[r]-lm_data$z_agb[r]
i<-i+1
if (i>nLocs){
j=j+1
i=1
}
}
hist(mod_fit$residuals)
# actual way I'm adding proc err back in
proc_err<-sqrt(sum(mod_fit$residuals^2)/length(mod_fit$residuals))
sqrt(sum(mod_fit$residuals^2)/(length(mod_fit$residuals)-length(mod_fit$coefficients)))
sd(mod_fit$residuals)
summary(mod_fit)$sigma
#adding it in on the iterations dataframe
Y_pred_iters<-Ypred_m + rnorm(nrow(Ypred_m)*ncol(Ypred_m), 0,proc_err)
par(mfrow=c(1,1))
plot(Y_pred_iters[1:100,], Ypred_m[1:100,])
Y_lo<-Ypred_m-proc_err
Y_hi<-Ypred_m+proc_err
#look
par(mfrow=c(1,1))
site_no<-sample(1:nLocs,1)
site_rows<-seq(site_no,34*nLocs,nLocs)
ymax<-max(Y_hi[site_rows])
ymin<-min(Y_lo[site_rows])
plot(seq(1987,2020,1),y=lm_data$z_agb[site_rows],pch=19, ylim=c(ymin,ymax))
lines(seq(1987,2020,1),y=lm_data$z_agb[site_rows],pch=19)
points(seq(1987,2020,1),y=Ypred_m[site_rows], col="red", lty=2,pch=19)
lines(seq(1987,2020,1),y=Ypred_m[site_rows], col="red",pch=19)
lines(seq(1987,2020,1),y=Y_hi[site_rows], col="red",lty=2,pch=19)
lines(seq(1987,2020,1),y=Y_lo[site_rows], col="red",lty=2,pch=19)
prod_preds<-list(Ypred_m, Y_hi, Y_lo, agb_m,resid_m,  coord_df, mod_fit)
names(prod_preds)<-c("prod_mean", "prod_90", "prod_10", "agb_m","resids", "coord_df", "mod_fit")
print(summary(mod_fit))
saveRDS(prod_preds, paste0(prod_folder,"/prod_model_outputs/", save_name,".rds"))
}
# this script calculates parameter uncertainty from the forecast_lm model using monte carlo sampling
## ----------------------------------------------  data + packages ------------------------------------------------
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(dplyr,tidyr,rstudioapi,stringr, ggplot2,tiff,raster,rgdal,spatialEco,glmnet,mvtnorm, plotrix, install = TRUE, update = getOption("pac_update"), character.only = FALSE)
current_path <- getActiveDocumentContext()$path
prod_folder<-dirname(dirname(current_path))
model_df_orig<-read.csv(paste0(prod_folder,"/gee_4cast_data/model_csvs/march_forecast_2021_csv.csv"))
model_df<-model_df_orig
dim(model_df)
#mod1: linear forecast
mod1_data<-subset(model_df, select=c(z_agb,prev_z_agb,yr, z_pr,z_tmmx,z_vpd,z_ndvi,pr_frac,
prev_pfg_frac,z_ssm,z_bulk_dens,z_pr_z_ssm))
dim(mod1_data)
save_loc<-"/figures/march_vis/z_forecast/"
save_name<-"z_march_forecast_lm"
(lm_coeffs<-read.csv(paste0(prod_folder, "/gee_4cast_data/model_csvs/z_march_forecast_lm_coeffs.csv")))
forecast_mod<-readRDS(paste0(prod_folder, "/prod_model_outputs/z_march_forecast_lm.rds"))
forecast_mod<-forecast_mod$mod_fit
# # ----------------------- no uncertainty  -------------------------
#use lm_coeffs for point estimates of coefficients
march_forecast_point_est<-matrix(NA,nrow=nIters,ncol=nLocs)
march_forecast_point_est<-lm_coeffs[lm_coeffs[,1]=="int",2]+
lm_coeffs[lm_coeffs[,1]=="prev_z_agb",2]*mod1_data$prev_z_agb +
lm_coeffs[lm_coeffs[,1]=="z_pr",2]*mod1_data$z_pr +
lm_coeffs[lm_coeffs[,1]=="z_tmmx",2]*mod1_data$z_tmmx +
lm_coeffs[lm_coeffs[,1]=="z_vpd",2]*mod1_data$z_vpd +
lm_coeffs[lm_coeffs[,1]=="z_ndvi",2]*mod1_data$z_ndvi +
lm_coeffs[lm_coeffs[,1]=="pr_frac",2]*mod1_data$pr_frac +
lm_coeffs[lm_coeffs[,1]=="prev_pfg_frac",2]*mod1_data$prev_pfg_frac +
lm_coeffs[lm_coeffs[,1]=="z_ssm",2]*mod1_data$z_ssm +
lm_coeffs[lm_coeffs[,1]=="z_bulk_dens",2]*mod1_data$z_bulk_dens +
lm_coeffs[lm_coeffs[,1]=="z_pr_z_ssm",2]*mod1_data$z_pr_z_ssm
march_forecast_point_est[1:10]
write.csv(march_forecast_point_est, paste0(prod_folder, "/gee_4cast_data/march_forecast_point_est_2021.csv"),row.names = F )
# # ----------------------- param uncertainty  -------------------------
#use vcov() to get covariance mnatrix of coeff and rmvnorm to sample
nIters<-1000
march_forecast_param<-matrix(NA,nrow=nIters,ncol=nLocs)
forecast_iter<-vector()
mu = coef(forecast_mod)
sigma = vcov(forecast_mod)
n = matrix(NA,nIters,34)   # storage for all simulations
coef_samples = rmvnorm(nIters,mean=mu,sigma=sigma)  # sample values of coefficients
coef_samples<-as.data.frame(coef_samples)
names(coef_samples)<-names(mu)
for ( i in 1:nIters){
forecast_iter<-coef_samples[i,names(coef_samples)=="(Intercept)"]+
coef_samples[i,names(coef_samples)=="prev_z_agb"]*mod1_data$prev_z_agb +
coef_samples[i,names(coef_samples)=="z_pr"]*mod1_data$z_pr +
coef_samples[i,names(coef_samples)=="z_tmmx"]*mod1_data$z_tmmx +
coef_samples[i,names(coef_samples)=="z_vpd"]*mod1_data$z_vpd +
coef_samples[i,names(coef_samples)=="z_ndvi"]*mod1_data$z_ndvi +
coef_samples[i,names(coef_samples)=="pr_frac"]*mod1_data$pr_frac +
coef_samples[i,names(coef_samples)=="prev_pfg_frac"]*mod1_data$prev_pfg_frac +
coef_samples[i,names(coef_samples)=="z_ssm"]*mod1_data$z_ssm +
coef_samples[i,names(coef_samples)=="z_bulk_dens"]*mod1_data$z_bulk_dens +
coef_samples[i,names(coef_samples)=="z_pr_z_ssm"]*mod1_data$z_pr_z_ssm
march_forecast_param[i,]<-forecast_iter
}
march_forecast_param[1:10,1:10]
mean(apply(march_forecast_param,2,sd), na.rm=T) #point estimate of param uncertainty
# monte carlo sampling param uncertainty
# write.csv(march_forecast_param, paste0(prod_folder, "/gee_4cast_data/march_forecast_param_2021.csv"),row.names = F )
# # ----------------------- proc uncertainty  -------------------------
#use lm_coeffs for point estimates of coefficients, add proc err with rnorm()
nIters<-500
march_forecast_proc<-matrix(NA,nrow=nIters,ncol=nLocs)
Y_pred<-forecast_mod$fitted.values
(proc_err<-summary(forecast_mod)$sigma)
results<-readRDS(paste0(prod_folder, "/prod_model_outputs/z_march_forecast_lm.rds"))
sd(results$resids)
lm_coeffs[lm_coeffs[,1]=="int",2]
for ( i in 1:nIters){
forecast_iter<-lm_coeffs[lm_coeffs[,1]=="int",2]+
lm_coeffs[lm_coeffs[,1]=="prev_z_agb",2]*mod1_data$prev_z_agb +
lm_coeffs[lm_coeffs[,1]=="z_pr",2]*mod1_data$z_pr +
lm_coeffs[lm_coeffs[,1]=="z_tmmx",2]*mod1_data$z_tmmx +
lm_coeffs[lm_coeffs[,1]=="z_vpd",2]*mod1_data$z_vpd +
lm_coeffs[lm_coeffs[,1]=="z_ndvi",2]*mod1_data$z_ndvi +
lm_coeffs[lm_coeffs[,1]=="pr_frac",2]*mod1_data$pr_frac +
lm_coeffs[lm_coeffs[,1]=="prev_pfg_frac",2]*mod1_data$prev_pfg_frac +
lm_coeffs[lm_coeffs[,1]=="z_ssm",2]*mod1_data$z_ssm +
lm_coeffs[lm_coeffs[,1]=="z_bulk_dens",2]*mod1_data$z_bulk_dens +
lm_coeffs[lm_coeffs[,1]=="z_pr_z_ssm",2]*mod1_data$z_pr_z_ssm +
rnorm(nLocs, 0, proc_err)
march_forecast_proc[i,]<-forecast_iter
}
march_forecast_proc[1:10,1:10]
# write.csv(march_forecast_param_proc, paste0(prod_folder, "/forecasted_data/march_forecast_proc_2021.csv"),row.names = F )
# # ----------------------- param AND proc uncertainty  -------------------------
march_forecast_param_proc<-matrix(NA,nrow=nIters,ncol=nLocs)
for ( i in 1:nIters){
forecast_iter<-coef_samples[i,names(coef_samples)=="(Intercept)"]+
coef_samples[i,names(coef_samples)=="prev_z_agb"]*mod1_data$prev_z_agb +
coef_samples[i,names(coef_samples)=="z_pr"]*mod1_data$z_pr +
coef_samples[i,names(coef_samples)=="z_tmmx"]*mod1_data$z_tmmx +
coef_samples[i,names(coef_samples)=="z_vpd"]*mod1_data$z_vpd +
coef_samples[i,names(coef_samples)=="z_ndvi"]*mod1_data$z_ndvi +
coef_samples[i,names(coef_samples)=="pr_frac"]*mod1_data$pr_frac +
coef_samples[i,names(coef_samples)=="prev_pfg_frac"]*mod1_data$prev_pfg_frac +
coef_samples[i,names(coef_samples)=="z_ssm"]*mod1_data$z_ssm +
coef_samples[i,names(coef_samples)=="z_bulk_dens"]*mod1_data$z_bulk_dens +
coef_samples[i,names(coef_samples)=="z_pr_z_ssm"]*mod1_data$z_pr_z_ssm +
rnorm(nLocs, 0, proc_err)
march_forecast_param_proc[i,]<-forecast_iter
}
march_forecast_param_proc[1:10,1:10]
# write.csv(march_forecast_param_proc, paste0(prod_folder, "/forecasted_data/march_forecast_proc_param_2021.csv"),row.names = F )
#quick check
mean(apply(march_forecast_param,2,sd), na.rm=T) #point estimate of param uncertainty
mean(apply(march_forecast_proc,2,sd), na.rm=T) #point estimate of proc uncertainty
mean(apply(march_forecast_param_proc,2,sd), na.rm=T) #point estimate of both
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(dplyr,tidyr,rstudioapi,stringr, ggplot2,tiff,raster,rgdal,spatialEco,glmnet,mvtnorm, plotrix, install = TRUE, update = getOption("pac_update"), character.only = FALSE)
current_path <- getActiveDocumentContext()$path
prod_folder<-dirname(dirname(current_path))
model_df_orig<-read.csv(paste0(prod_folder,"/gee_4cast_data/model_csvs/march_forecast_2021_csv.csv"))
model_df<-model_df_orig
dim(model_df)
#mod1: linear forecast
mod1_data<-subset(model_df, select=c(z_agb,prev_z_agb,yr, z_pr,z_tmmx,z_vpd,z_ndvi,pr_frac,
prev_pfg_frac,z_ssm,z_bulk_dens,z_pr_z_ssm))
dim(mod1_data)
save_loc<-"/figures/march_vis/z_forecast/"
save_name<-"z_march_forecast_lm"
(lm_coeffs<-read.csv(paste0(prod_folder, "/gee_4cast_data/model_csvs/z_march_forecast_lm_coeffs.csv")))
forecast_mod<-readRDS(paste0(prod_folder, "/prod_model_outputs/z_march_forecast_lm.rds"))
forecast_mod<-forecast_mod$mod_fit
(lm_coeffs<-read.csv(paste0(prod_folder, "/gee_4cast_data/model_csvs/march_forecast_lm_coeffs.csv")))
(lm_coeffs<-read.csv(paste0(prod_folder, "/gee_4cast_data/model_csvs/march_forecast_lm_coeffs.csv")))
save_loc
# View(lm_coeffs)
# write.csv(lm_coeffs,paste0(prod_folder, save_loc,"/",save_name,"_coeffs.csv"), row.names = FALSE)
write.csv(lm_coeffs,paste0(prod_folder, "/model_csvs/",save_name,"_coeffs.csv"), row.names = FALSE)
# View(lm_coeffs)
# write.csv(lm_coeffs,paste0(prod_folder, save_loc,"/",save_name,"_coeffs.csv"), row.names = FALSE)
write.csv(lm_coeffs,paste0(prod_folder, "/gee_4cast_data/model_csvs/",save_name,"_coeffs.csv"), row.names = FALSE)
(lm_coeffs<-read.csv(paste0(prod_folder, "/gee_4cast_data/model_csvs/march_forecast_lm_coeffs.csv")))
save_name
save_name
# View(lm_coeffs)
# write.csv(lm_coeffs,paste0(prod_folder, save_loc,"/",save_name,"_coeffs.csv"), row.names = FALSE)
write.csv(lm_coeffs,paste0(prod_folder, "/gee_4cast_data/model_csvs/march_forecast_lm_coeffs.csv"), row.names = FALSE)
forecast_mod<-readRDS(paste0(prod_folder, "/prod_model_outputs/march_forecast_lm.rds"))
forecast_mod<-forecast_mod$mod_fit
march_forecast_point_est<-matrix(NA,nrow=nIters,ncol=nLocs)
march_forecast_point_est<-lm_coeffs[lm_coeffs[,1]=="int",2]+
lm_coeffs[lm_coeffs[,1]=="prev_z_agb",2]*mod1_data$prev_z_agb +
lm_coeffs[lm_coeffs[,1]=="z_pr",2]*mod1_data$z_pr +
lm_coeffs[lm_coeffs[,1]=="z_tmmx",2]*mod1_data$z_tmmx +
lm_coeffs[lm_coeffs[,1]=="z_vpd",2]*mod1_data$z_vpd +
lm_coeffs[lm_coeffs[,1]=="z_ndvi",2]*mod1_data$z_ndvi +
lm_coeffs[lm_coeffs[,1]=="pr_frac",2]*mod1_data$pr_frac +
lm_coeffs[lm_coeffs[,1]=="prev_pfg_frac",2]*mod1_data$prev_pfg_frac +
lm_coeffs[lm_coeffs[,1]=="z_ssm",2]*mod1_data$z_ssm +
lm_coeffs[lm_coeffs[,1]=="z_bulk_dens",2]*mod1_data$z_bulk_dens +
lm_coeffs[lm_coeffs[,1]=="z_pr_z_ssm",2]*mod1_data$z_pr_z_ssm
march_forecast_point_est[1:10]
write.csv(march_forecast_point_est, paste0(prod_folder, "/gee_4cast_data/march_forecast_point_est_2021.csv"),row.names = F )
march_forecast_point_est<-matrix(NA,nrow=nIters,ncol=nLocs)
lm_coeffs
march_forecast_point_est<-lm_coeffs[lm_coeffs[,1]=="int",2]+
lm_coeffs[lm_coeffs[,1]=="prev_z_agb",2]*mod1_data$prev_z_agb +
lm_coeffs[lm_coeffs[,1]=="z_pr",2]*mod1_data$z_pr +
lm_coeffs[lm_coeffs[,1]=="z_tmmx",2]*mod1_data$z_tmmx +
lm_coeffs[lm_coeffs[,1]=="z_vpd",2]*mod1_data$z_vpd +
lm_coeffs[lm_coeffs[,1]=="z_ndvi",2]*mod1_data$z_ndvi +
lm_coeffs[lm_coeffs[,1]=="pr_frac",2]*mod1_data$pr_frac +
lm_coeffs[lm_coeffs[,1]=="prev_pfg_frac",2]*mod1_data$prev_pfg_frac +
lm_coeffs[lm_coeffs[,1]=="z_ssm",2]*mod1_data$z_ssm +
lm_coeffs[lm_coeffs[,1]=="z_bulk_dens",2]*mod1_data$z_bulk_dens +
lm_coeffs[lm_coeffs[,1]=="z_pr_z_ssm",2]*mod1_data$z_pr_z_ssm
str(lm_coeffs)
# # ----------------------- no uncertainty  -------------------------
#use lm_coeffs for point estimates of coefficients
lm_coeffs[,2]<-as.numeric(lm_coeffs)
(lm_coeffs<-read.csv(paste0(prod_folder, "/gee_4cast_data/model_csvs/march_forecast_lm_coeffs.csv")))
# # ----------------------- no uncertainty  -------------------------
#use lm_coeffs for point estimates of coefficients
lm_coeffs[,2]<-as.numeric(lm_coeffs)
class(lm_coeffs)
# # ----------------------- no uncertainty  -------------------------
#use lm_coeffs for point estimates of coefficients
lm_coeffs[,2]<-as.numeric(lm_coeffs[,2])
march_forecast_point_est<-matrix(NA,nrow=nIters,ncol=nLocs)
march_forecast_point_est<-lm_coeffs[lm_coeffs[,1]=="int",2]+
lm_coeffs[lm_coeffs[,1]=="prev_z_agb",2]*mod1_data$prev_z_agb +
lm_coeffs[lm_coeffs[,1]=="z_pr",2]*mod1_data$z_pr +
lm_coeffs[lm_coeffs[,1]=="z_tmmx",2]*mod1_data$z_tmmx +
lm_coeffs[lm_coeffs[,1]=="z_vpd",2]*mod1_data$z_vpd +
lm_coeffs[lm_coeffs[,1]=="z_ndvi",2]*mod1_data$z_ndvi +
lm_coeffs[lm_coeffs[,1]=="pr_frac",2]*mod1_data$pr_frac +
lm_coeffs[lm_coeffs[,1]=="prev_pfg_frac",2]*mod1_data$prev_pfg_frac +
lm_coeffs[lm_coeffs[,1]=="z_ssm",2]*mod1_data$z_ssm +
lm_coeffs[lm_coeffs[,1]=="z_bulk_dens",2]*mod1_data$z_bulk_dens +
lm_coeffs[lm_coeffs[,1]=="z_pr_z_ssm",2]*mod1_data$z_pr_z_ssm
march_forecast_point_est[1:10]
write.csv(march_forecast_point_est, paste0(prod_folder, "/gee_4cast_data/march_forecast_point_est_2021.csv"),row.names = F )
nIters<-1000
march_forecast_param<-matrix(NA,nrow=nIters,ncol=nLocs)
forecast_iter<-vector()
mu = coef(forecast_mod)
sigma = vcov(forecast_mod)
n = matrix(NA,nIters,34)   # storage for all simulations
coef_samples = rmvnorm(nIters,mean=mu,sigma=sigma)  # sample values of coefficients
coef_samples<-as.data.frame(coef_samples)
names(coef_samples)<-names(mu)
for ( i in 1:nIters){
forecast_iter<-coef_samples[i,names(coef_samples)=="(Intercept)"]+
coef_samples[i,names(coef_samples)=="prev_z_agb"]*mod1_data$prev_z_agb +
coef_samples[i,names(coef_samples)=="z_pr"]*mod1_data$z_pr +
coef_samples[i,names(coef_samples)=="z_tmmx"]*mod1_data$z_tmmx +
coef_samples[i,names(coef_samples)=="z_vpd"]*mod1_data$z_vpd +
coef_samples[i,names(coef_samples)=="z_ndvi"]*mod1_data$z_ndvi +
coef_samples[i,names(coef_samples)=="pr_frac"]*mod1_data$pr_frac +
coef_samples[i,names(coef_samples)=="prev_pfg_frac"]*mod1_data$prev_pfg_frac +
coef_samples[i,names(coef_samples)=="z_ssm"]*mod1_data$z_ssm +
coef_samples[i,names(coef_samples)=="z_bulk_dens"]*mod1_data$z_bulk_dens +
coef_samples[i,names(coef_samples)=="z_pr_z_ssm"]*mod1_data$z_pr_z_ssm
march_forecast_param[i,]<-forecast_iter
}
march_forecast_param[1:10,1:10]
mean(apply(march_forecast_param,2,sd), na.rm=T) #point estimate of param uncertainty
# # ----------------------- proc uncertainty  -------------------------
#use lm_coeffs for point estimates of coefficients, add proc err with rnorm()
nIters<-500
march_forecast_proc<-matrix(NA,nrow=nIters,ncol=nLocs)
Y_pred<-forecast_mod$fitted.values
(proc_err<-summary(forecast_mod)$sigma)
results<-readRDS(paste0(prod_folder, "/prod_model_outputs/z_march_forecast_lm.rds"))
sd(results$resids)
lm_coeffs[lm_coeffs[,1]=="int",2]
results<-readRDS(paste0(prod_folder, "/prod_model_outputs/march_forecast_lm.rds"))
sd(results$resids)
lm_coeffs[lm_coeffs[,1]=="int",2]
for ( i in 1:nIters){
forecast_iter<-lm_coeffs[lm_coeffs[,1]=="int",2]+
lm_coeffs[lm_coeffs[,1]=="prev_z_agb",2]*mod1_data$prev_z_agb +
lm_coeffs[lm_coeffs[,1]=="z_pr",2]*mod1_data$z_pr +
lm_coeffs[lm_coeffs[,1]=="z_tmmx",2]*mod1_data$z_tmmx +
lm_coeffs[lm_coeffs[,1]=="z_vpd",2]*mod1_data$z_vpd +
lm_coeffs[lm_coeffs[,1]=="z_ndvi",2]*mod1_data$z_ndvi +
lm_coeffs[lm_coeffs[,1]=="pr_frac",2]*mod1_data$pr_frac +
lm_coeffs[lm_coeffs[,1]=="prev_pfg_frac",2]*mod1_data$prev_pfg_frac +
lm_coeffs[lm_coeffs[,1]=="z_ssm",2]*mod1_data$z_ssm +
lm_coeffs[lm_coeffs[,1]=="z_bulk_dens",2]*mod1_data$z_bulk_dens +
lm_coeffs[lm_coeffs[,1]=="z_pr_z_ssm",2]*mod1_data$z_pr_z_ssm +
rnorm(nLocs, 0, proc_err)
march_forecast_proc[i,]<-forecast_iter
}
march_forecast_proc[1:10,1:10]
march_forecast_param_proc<-matrix(NA,nrow=nIters,ncol=nLocs)
for ( i in 1:nIters){
forecast_iter<-coef_samples[i,names(coef_samples)=="(Intercept)"]+
coef_samples[i,names(coef_samples)=="prev_z_agb"]*mod1_data$prev_z_agb +
coef_samples[i,names(coef_samples)=="z_pr"]*mod1_data$z_pr +
coef_samples[i,names(coef_samples)=="z_tmmx"]*mod1_data$z_tmmx +
coef_samples[i,names(coef_samples)=="z_vpd"]*mod1_data$z_vpd +
coef_samples[i,names(coef_samples)=="z_ndvi"]*mod1_data$z_ndvi +
coef_samples[i,names(coef_samples)=="pr_frac"]*mod1_data$pr_frac +
coef_samples[i,names(coef_samples)=="prev_pfg_frac"]*mod1_data$prev_pfg_frac +
coef_samples[i,names(coef_samples)=="z_ssm"]*mod1_data$z_ssm +
coef_samples[i,names(coef_samples)=="z_bulk_dens"]*mod1_data$z_bulk_dens +
coef_samples[i,names(coef_samples)=="z_pr_z_ssm"]*mod1_data$z_pr_z_ssm +
rnorm(nLocs, 0, proc_err)
march_forecast_param_proc[i,]<-forecast_iter
}
march_forecast_param_proc[1:10,1:10]
mean(apply(march_forecast_param,2,sd), na.rm=T) #point estimate of param uncertainty
mean(apply(march_forecast_proc,2,sd), na.rm=T) #point estimate of proc uncertainty
mean(apply(march_forecast_param_proc,2,sd), na.rm=T) #point estimate of both
#loading data and pcks
if (!require("pacman")) install.packages("pacman"); library(pacman)
p_load(dplyr, gstat,stringr,raster,rstudioapi, rgdal, spacetime,ape,FRK,glmnet,install = TRUE, update = getOption("pac_update"), character.only = FALSE)
current_path <-getActiveDocumentContext()$path
output<-paste0(dirname(dirname(current_path)), "/prod_model_outputs/")
## ---------------------------------------- MAPE,MSPE,MBIAS ---------------------------------
options(scipen = 999)
month<-"march"
space_only_predictions<-readRDS(paste0(output,"z_", month, "_spatial_only_lm.rds"))
predictions_lm<-readRDS(paste0(output, "z_",month, "_forecast_lm.rds"))
predictions_clim<-readRDS(paste0(output, "z_",month, "_climate_lm.rds"))
predictions_noaa3month_lm<-readRDS(paste0(output,"z_", month, "_noaa3month_lm.rds"))
space_only_predictions<-readRDS(paste0(output, month, "_spatial_only_lm.rds"))
predictions_lm<-readRDS(paste0(output,month, "_forecast_lm.rds"))
predictions_clim<-readRDS(paste0(output, month, "_climate_lm.rds"))
predictions_noaa3month_lm<-readRDS(paste0(output,month, "_noaa3month_lm.rds"))
predictions_climate_and_ndvi<-readRDS(paste0(output,month, "_climate_and_ndvi_lm.rds"))
df_names<-paste0(names(space_only_predictions[[1]]), rep(seq(1987,2020,1),each=6))
resids_sp_mat<-space_only_predictions[[5]]; names(resids_sp_mat)<-df_names
resids_lm_mat<-predictions_lm[[5]]; names(resids_lm_mat)<-df_names
resids_clim_mat<-predictions_clim[[5]]; names(resids_clim_mat)<-df_names
resids_noaa_mat<-predictions_noaa3month_lm[[5]]; names(resids_noaa_mat)<-df_names
resids_clim_ndvi_mat<-predictions_climate_and_ndvi[[5]]; names(resids_clim_ndvi_mat)<-df_names
mape_fnc<-function(data) {mean(as.vector(abs(data)))}
mspe_fnc<-function(data) {mean(as.vector(data)^2)}
mbias_fnc<-function(data) {mean(as.vector(data))}
sp_mape<-apply(X= resids_sp_mat,2, FUN=mape_fnc)
sp_mspe<-apply(X= resids_sp_mat,2, FUN=mspe_fnc)
sp_mbias<-apply(X= resids_sp_mat,2, FUN=mbias_fnc)
real_mape<-apply(X= resids_lm_mat,2, FUN=mape_fnc)
real_mspe<-apply(X= resids_lm_mat,2, FUN=mspe_fnc)
real_mbias<-apply(X= resids_lm_mat,2, FUN=mbias_fnc)
clim_mape<-apply(X= resids_clim_mat,2, FUN=mape_fnc)
clim_mspe<-apply(X= resids_clim_mat,2, FUN=mspe_fnc)
clim_mbias<-apply(X= resids_clim_mat,2, FUN=mbias_fnc)
noaa_mape<-apply(X= resids_noaa_mat,2, FUN=mape_fnc)
noaa_mspe<-apply(X= resids_noaa_mat,2, FUN=mspe_fnc)
noaa_mbias<-apply(X= resids_noaa_mat,2, FUN=mbias_fnc)
clim_and_ndvi_mape<-apply(X= resids_clim_ndvi_mat,2, FUN=mape_fnc)
clim_and_ndvi_mspe<-apply(X= resids_clim_ndvi_mat,2, FUN=mspe_fnc)
clim_and_ndvi_mbias<-apply(X= resids_clim_ndvi_mat,2, FUN=mbias_fnc)
mape<-cbind(sp_mape,real_mape,clim_mape,clim_and_ndvi_mape,noaa_mape,seq(1987,2020,1))
colMeans(mape)
mspe<-cbind(sp_mspe,real_mspe,clim_mspe,clim_and_ndvi_mspe,noaa_mspe,seq(1987,2020,1))
colMeans(mspe)
mbias<-cbind(sp_mbias,real_mbias,clim_mbias,clim_and_ndvi_mbias, noaa_mbias,seq(1987,2020,1))
colMeans(mbias)
par(mfrow=c(1,1))
# Figure 4
# png(paste0(dirname(current_path), "/march_vis/mape.png"))
plot(mape[,6],mape[,1], 'l',ylim=c(.35,1.75),  main= "Prediction Error by model", col="black", cex.main=3,
lwd=2,
ylab= "Mean Absolute Predictive Error (standardized)",
xlab="Year", cex.lab=1.5)
lines(mape[,6],mape[,2], 'l', col="blue",lwd=3)
lines(mape[,6],mape[,3], 'l', col="red", lwd=2)
lines(mape[,6],mape[,4], 'l', col="purple",lwd=2)
legend("topleft", pch=19,legend=c("null model", "forecast", "clim", "clim_and_ndvi"),
col=c("black","blue","red", "purple"), cex=2)
# png(paste0(dirname(current_path), "/march_vis/mspe.png"))
plot(mspe[,6],mspe[,1], 'l',ylim=c(0,3),  main= "Mean Squared Predictive Error")
lines(mspe[,6],mspe[,2], 'l',ylim=c(0,.5), col="blue")
lines(mspe[,6],mspe[,3], 'l',ylim=c(0,.5), col="red")
lines(mspe[,6],mspe[,4], 'l',ylim=c(0,.5), col="purple")
legend("topright", pch=19,legend=c("spatial only/null model", "forecast", "clim", "clim_and_ndvi"), col=c("black","blue","red", "purple"))
# dev.off()
#
# png(paste0(dirname(current_path), "/march_vis/mean_bias.png"))
plot(mbias[,6],mbias[,1], 'l',ylim=c(-1,1.5), main= "Mean Prediction Bias")
lines(mbias[,6],mbias[,2], 'l',ylim=c(-.5,.5), col="blue")
lines(mbias[,6],mbias[,3], 'l',ylim=c(-.5,.5), col="red")
lines(mbias[,6],mbias[,4], 'l',ylim=c(-.5,.5), col="purple")
legend("topright", pch=19,legend=c("spatial only/null model", "forecast", "clim", "clim_and_ndvi"), col=c("black","blue","red", "purple"))
